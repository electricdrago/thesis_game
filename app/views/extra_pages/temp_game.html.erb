<style>
  .selected {
    border: 9px solid green !important;
  }
  .over {
    border: 9px solid yellow !important;
  }
  .wrong {
    border: 9px solid red !important;
  }
</style>

<p>Welcome <%=current_user.name%> </p>
<div id="jobs"></div>
<div id="machines"></div>

<script>

var maxTime = <%=@maxTime%>
var activities_map = []
var job_colors = ["blue", "green", "red"]
var machine_colors = ["magenta", "GreenYellow", "aqua"]
var machine_type = ""
<% @machine_type.each_char { |c|%>
  machine_type+=<%=c%>
<%}%>
function drag(ev){
  ev.dataTransfer.setData("text", ev.target.id)
  ev.target.classList.add("selected")
}
function allowDrop(ev){
  ev.preventDefault()
  ev.target.classList.add("over")
}

function drop(ev){
  ev.preventDefault()
  var data = ev.dataTransfer.getData("text")
  var act = document.getElementById(data)
  var hidden_space = document.getElementById("hidden"+data)
  if (!hidden_space){
    hidden_space = document.createElement("div")
    hidden_space.setAttribute("id","hidden"+data)
    hidden_space.setAttribute("class","hidden_space")
    hidden_space.setAttribute("style", "height: 100%; width: 1%;float:left;")
  }
  ev.target.classList.remove("selected", "wrong", "over")
  if (ev.target.classList.contains("machine")){

    //ev.target.appendChild(act)
    //ev.target.insertBefore(hidden_space,act)
    transform_movement(ev.target.id, data, -1)
  } else if (ev.target.classList.contains("hidden_space")){
    //ev.target.parentNode.insertBefore(act, ev.target)
    //ev.target.parentNode.insertBefore(hidden_space,act)
    transform_movement(ev.target.parentNode.id, data, ev.target.id.substr(6))
  } else if (ev.target.classList.contains("activity")){
    hidden_back = document.getElementById("hidden"+ev.target.id)
    if(hidden_back){
      //ev.target.parentNode.insertBefore(act, hidden_back)
      //ev.target.parentNode.insertBefore(hidden_space,act)
      transform_movement(ev.target.parentNode.id, data, ev.target.id)
    }
  } else {
    ev.preventDefault()
  }
}

function deClass(ev){
  ev.target.classList.remove("selected", "wrong", "over")
}

function defaultDrop(ev){
  ev.target.classList.remove("selected", "wrong", "over")
  if ("none" == ev.dataTransfer.dropEffect){
    var position = document.getElementById("original"+ev.target.id)
    if(position){
      //position.parentNode.insertBefore(ev.target, position)
      var hidden_space = document.getElementById("hidden"+ev.target.id)
      if(hidden_space){
        //hidden_space.parentNode.removeChild(hidden_space)
      }
      transform_movement(-1, ev.target.id, -1)
    }
  }
}

function addJob(id,activities){
  //Job will have the size of each activity and its id
  // activities[x] = [activity cost, machine type, activity id]

  var job = document.createElement("div")
  job.setAttribute("id","job"+String(id))
  job.setAttribute("style", "height: 100px;")
  var j
  for (j=0; j<activities.length; j++){
    var activity = document.createElement("div")
    activity.setAttribute("id", "activity"+String(activities[j][2]))
    activity.setAttribute("draggable", "true")
    activity.setAttribute("class","activity")
    activity.setAttribute("ondragstart", "drag(event)")
    activity.setAttribute("ondragend", "defaultDrop(event)")
    activity.setAttribute("style", "box-sizing: border-box; width: "+String(activities[j][0]/maxTime*90)+"%; "+
        "height: 100%; float:left; background: "+ job_colors[id]+"; border: 9px solid "+machine_colors[activities[j][1]]+";")
    var original_position = document.createElement("div")
    original_position.setAttribute("id", "original"+activity.id)
    original_position.setAttribute("style", "width:0 ;float:left;")
    job.appendChild(activity)
    job.appendChild(original_position)

  }
  var jobs = document.getElementById("jobs")
  jobs.appendChild(job)
  small_space = document.createElement("div")
  small_space.setAttribute("style", "height: 10px")
  jobs.appendChild(small_space)


}

function createMachines(amount){
  var j
  for (j = 0; j < amount; j++){

    var machine = document.createElement("div")
    machine.setAttribute("id", "machine"+String(j))
    machine.setAttribute("class", "machine")
    machine.setAttribute("style", "height: 100px; border: 5px solid "+machine_colors[(parseInt(machine_type.charAt(j))||0)]+";")
    machine.setAttribute("ondrop", "drop(event)")
    machine.setAttribute("ondragover", "allowDrop(event)")
    machine.setAttribute("ondragleave", "deClass(event)")
    var machines = document.getElementById("machines")
    machines.appendChild(machine)
  }
}
createMachines(3)
function move_activity(machine, position, activity, time_wasted, next_activity){
  console.log("move", machine, position, activity, time_wasted, next_activity)
  activity = String(activity)
  if (machine == -1){
    //get activity to original position
    var original_position = document.getElementById("originalactivity"+activity)
    var act = document.getElementById("activity"+activity)
    if(original_position){
      original_position.parentNode.insertBefore(act, original_position)
      hidden_space = document.getElementById("hiddenactivity"+activity)
      if(hidden_space){
        hidden_space.parentNode.removeChild(hidden_space)
      }
    }
  }else {
    var act = document.getElementById("activity"+activity)
    var hidden_space = document.getElementById("hiddenactivity"+activity)
    var mach = document.getElementById("machine"+String(machine))
    if (!hidden_space){
      hidden_space = document.createElement("div")
      hidden_space.setAttribute("id","hiddenactivity"+activity)
      hidden_space.setAttribute("class","hidden_space")
      hidden_space.setAttribute("style", "height: 100%; width: 1%;float:left;")
    }
    hidden_space.style.width = String(time_wasted/maxTime*90)+"%"
    if(position <0 || next_activity<0){
      //add to end of machine (just append)
      mach.appendChild(act)
      mach.insertBefore(hidden_space,act)
    } else {
      act_2_hidden = document.getElementById("hiddenactivity"+String(next_activity))
      console.log("moving", activity, "before", next_activity, act_2_hidden)
      mach.insertBefore(act, act_2_hidden)
      mach.insertBefore(hidden_space,act)
    }
  }

}

//move_activity(1, 0, 1, 10)
//move_activity(1, 1, 2, 10, 1)
//move_activity(1, 0, 3, 10)
//move_activity(-1, -1, 1)




//tree will be used for applying changes
class treeNode{
  constructor(activity, key, waiting){
    this.waiting = waiting||0;
    this.next = [];
    this.activity = activity;
    this.was_changed = false;
    this.key = key;
  }
  depDone(){this.waiting-=1;}
  depChange(){
    this.waiting-=1;
    this.was_changed = true;
  }
  ready(){return this.waiting<=0}
  change(){
    var newToChange = [];
    var wasChange = false;
    var i;

    if(this.was_changed){
      wasChange = this.activity.change()
    }

    if (wasChange){
      for (i=0; i<this.next.length; i++){
        this.next[i].depChange()
        if (this.next[i].ready()){
          newToChange.push(this.next[i])
        }
      }
    } else {
      for (i=0; i<this.next.length; i++){
        this.next[i].depDone()
        if (this.next[i].ready()){
          newToChange.push(this.next[i])
        }
      }

    }
    return newToChange

  }
}

//Machine class
class machine {
  constructor(id, jss, typee) {
    this.id = id
    this.time_taken = 0
    this.machine = []
    this.JSS = jss
    if (typee == undefined){
      typee = 1
    }
    this.type = typee

  }

  addActivity(activity, position){
    position = position||-1;
    if(activity.earliest_time()>=0){
      if(activity.machine_type != this.type){
        move_not_possible("This activity cannot be done here");
        return
      }
      position-=1;
      var changed_activities = []
      if(activity.machine == this.id && activity.position<position){
        position-=1;
      }
      if(activity.machine>-1){
        changed_activities = changed_activities.concat(this.JSS.machines[activity.machine].remove_activity(activity.position))
      }

      if (position>=0 && position < this.machine.length){

        var canDoIt = true
        var idAct = activity.id
        var idJob = activity.activities.id
        var i;
        for (i = 0; i<position; i++){
          if (this.machine[i].activities.id== idJob && this.machine[i].id > idAct){
            canDoIt = false
            break;
          }
        }
        if (canDoIt){
          this.machine.splice(position, 0, activity)
          activity.changeMachine(this.id)
          for(i=position; i<this.machine.length; i++){
            this.machine[i].position = i;
          }
          if (this.JSS.pendant_activities.length >0){
            this.JSS.fillTree(this.JSS.pendant_activities[0])
          }

          activity.update_status(-1,-1)
          this.JSS.fillTree(new treeNode(activity,activity.activities.id.toString()+", "+activity.id.toString()), changed_activities)

        } else {
          move_not_possible("This activity cannot be placed here");
        }

      } else {
        var position = this.machine.length
        var starting_time = Math.max(this.time_taken, activity.earliest_time())
        var end_time = starting_time + activity.time_cost
        this.machine.push(activity)
        activity.changeMachine(this.id)
        move_activity(this.id, -1, activity.activity_id, starting_time-this.time_taken, -1)
        this.time_taken = end_time;
        activity.update_status(starting_time, end_time)
        activity.position = position

        if (changed_activities.length > 0){
          activity = changed_activities[0]
          this.JSS.fillTree(new treeNode(activity,activity.activities.id.toString()+", "+activity.id.toString()))
        }
      }
    } else {
      move_not_possible("This activity cannot be placed yet");
    }
  }

  getNext(position){
    position+=1;
    if(this.machine.length >position){
      return [this.machine[position]]
    }
    return []

  }

  //in order to be able to move activities on an specific position we need to know
  //   before which activity on a machine will it be placed, if there is no activity
  //    -1 will be returned
  nextId(position){
    position+=1;
    if(this.machine.length >position){
      return this.machine[position].activity_id
    }
    return -1
  }

  change(position){
    var activity = this.machine[position]
    var prevStartTime = activity.starting_time
    var prevTime = 0
    if (position-1>=0){
      prevTime = this.machine[position-1].end_time;
    }
    var starting_time = Math.max(prevTime, activity.earliest_time())

    move_activity(this.id, position, activity.activity_id, starting_time-prevTime, this.nextId(position))

    if (starting_time == prevStartTime){
      return false
    }
    var end_time = starting_time + activity.time_cost

    if (position >= this.machine.length -1){
      this.time_taken = end_time
    }
    activity.update_status(starting_time, end_time)
    return true
  }

  remove_activity(position){

    this.machine.splice(position,1)

    if (this.machine.length > 0){
      if (position>= this.machine.length){
        this.time_taken = this.machine[this.machine.length-1].end_time
        return []
      }
    } else {
      this.time_taken = 0
      return []
    }
    var i
    for(i = position; i< this.machine.length; i++){
      this.machine[i].position = i;
    }
    return [this.machine[position]]
  }

  unused_time(){
    var unused_time = 0;
    prev_time = 0;
    var i
    for(i = 0; i < this.machine.length; i++){
      unused_time += this.machine[i].starting_time - prev_time
      prev_time = this.machine[i].end_time
    }
    return unused_time
  }
}

class activity {
  constructor(id, activities, time_cost, normalized_time, jss, machine_type, activity_id){
    if (machine_type == undefined){
      machine_type = 1
    }
    this.machine_type = machine_type
    this.id = id
    this.activities = activities
    this.time_cost = time_cost
    this.normalized_time = normalized_time
    this.starting_time = -1
    this.end_time = -1
    this.machine = -1
    this.position = -1
    this.JSS = jss
    this.activity_id = activity_id
    activities_map[activity_id] = this

  }

  earliest_time(){
    return this.activities.get_earliest_time(this.id)

  }

  update_status(starting_time, end_time){
    this.starting_time = starting_time
    this.end_time = end_time
  }

  getNext(){
    var nexts = this.activities.getNext(this.id)
    if (this.machine>=0){
      nexts = nexts.concat(this.JSS.machines[this.machine].getNext(this.position))
    }
    return nexts
  }

  change(){
    if (this.machine >=0){
      return this.JSS.machines[this.machine].change(this.position)
    }
    return false
  }

  changeMachine(id){
    this.machine = id
    this.activities.changeMachine(this.id, id)
  }

  dependant_machine(){
    return this.JSS.machines[this.machine].machine.length - this.position -1
  }
  dependant_activities(){
    return this.activities.next_id -this.id -1
  }

  remove_from_machines(){


    if (this.activities.getNext(this.id).length<=0){

      if (this.JSS.pendant_activities.length >0){
        this.JSS.fillTree(this.JSS.pendant_activities[0])
      }
      move_activity(-1, -1, this.activity_id)
      var changed_activities = []
      if(this.machine>-1){
        changed_activities = this.JSS.machines[this.machine].remove_activity(this.position)
        this.changeMachine(-1)
        this.update_status(-1,-1)
        if (changed_activities.length > 0){
          var activity = changed_activities[0]
          this.JSS.fillTree(new treeNode(activity,activity.activities.id.toString()+", "+activity.id.toString()))
        }
      }
      this.changeMachine(-1)
      this.update_status(-1,-1)

    } else {
      move_not_possible("For removing this activity you need to remove another activity");
    }
  }

}

class activities{
  constructor(id, activities_cost, jss, representation){
    this.representation = representation||'x'
    this.id = id
    this.activities = new Array(activities_cost.length)
    var cont = 0
    this.total_cost = 0
    var i
    for (i=0; i < activities_cost.length; i++){
      this.activities[i] = new activity(i, this, activities_cost[i][0], activities_cost[i][0], jss, activities_cost[i][1], activities_cost[i][2])
      console.log("activity", i, activities_cost[i][1])
      this.total_cost += activities_cost[i][0]
    }
    this.remaining_time = this.total_cost
    this.machine_activities = []
    for (i = 0; i < activities_cost.length; i++){
      this.machine_activities.push(-1)
    }
    this.JSS = jss
    this.next_id = 0

  }

  get_earliest_time (id){
    if(id<=0){
      return 0
    } else {
      return this.activities[id-1].end_time
    }
  }
  getNext (id){
    id+=1
    if(this.activities.length>id && this.machine_activities[id]>=0){
      return [this.activities[id]]
    }
    return []
  }
  next_free_activity(){
    if(this.next_id<this.activities.length){
      return this.activities[this.next_id]
    }
    return null
  }
  changeMachine(act_id, mach_id){
    this.machine_activities[act_id] = mach_id
    if(act_id == this.next_id){
      if(mach_id>=0){
        this.next_id+=1
        this.remaining_time -= this.activities[act_id].time_cost
      } else {
        this.next_id -=1
        this.remaining_time += this.activities[act_id].time_cost
      }
    }
  }

  pendant_activities(){
    var pnd_activities = []
    var i = this.next_id
    while(i<this.activities.length){
      pnd_activities.push(this.activities[i].time_cost)
      i+=1
    }
    return pnd_activities
  }
}

class JSSProblem {
  constructor(id, source, solver) {
    this.id = id
    this.solver = solver
    this.seen_activities = new Map()

    this.activities =[]
    this.pendant_activities= []
    this.readSource(source)
    this.start()
  }

  getNode(activity, waiting){
    waiting = waiting||0
    var current_node = null
    var key = activity.activities.id.toString()+ ", "+ activity.id.toString()
    if (! this.seen_activities.has(key)){
      current_node = new treeNode(activity, key, waiting)
      this.seen_activities.set(key, current_node)

    } else {
      current_node = this.seen_activities.get(key)
      current_node.waiting += waiting
    }
    return current_node
  }

  fillTree(root, other_activities){
    other_activities = other_activities||[]
    root.was_changed = true
    this.pendant_activities.push(root)
    this.seen_activities.set(root.key, root)
    var toChange = [root]

    var i
    for(i = 0; i<other_activities.length; i++){
      var o_a = this.getNode(other_activities[i])
      o_a.was_changed=true
      toChange.push(o_a)
      this.pendant_activities.push(o_a)

    }
    for (i=0; i<this.pendant_activities.length; i++){
      var tempNext = this.pendant_activities[i].activity.getNext()
      var tempNodes = []
      var j
      for (j = 0; j<tempNext.length; j++){
        tempNodes.push(this.getNode(tempNext[j], 1))
      }
      tempNext.splice(0,tempNext.length)

      this.pendant_activities[i].next = this.pendant_activities[i].next.concat(tempNodes)
      this.pendant_activities = this.pendant_activities.concat(tempNodes)
      tempNodes.splice(0, tempNodes.length)
    }

    this.pendant_activities.splice(0, this.pendant_activities.length)

    var i
    for(i = 0; i<toChange.length; i++){

      toChange = toChange.concat(toChange[i].change())

    }

    toChange.splice(0, toChange.length)
    this.seen_activities.clear()
  }

  readSource(source){
    this.machines = new Array(source.machines)
    var i
    for(i=0; i<source.machines; i++){
      this.machines[i] = new machine(i, this, parseInt(source.machine_type.charAt(i)))
      console.log(i, parseInt(source.machine_type.charAt(i)))
    }
    var a= source.activities.length

    for(i=0; i<a; i++){
      this.activities.push(new activities(i, source.activities[i], this, toString(i)))
    }
  }

  start(){
    this.solver.start(this)
  }

}

class solver {
  constructor(){
    this.jssp = null
  }
  getNextStep(){
    // probably will come directly from the user
    var activity = null
    var  i
    for (i=0; i < this.jssp.activities.length; i++){
      activity = this.jssp.activities[i].next_free_activity()
      if (activity != null){
        var job = this.jssp.activities[i].id
        var act = activity
        break
      }

    }
    if (activity == null){
      return -1
    }
    var machine
    for(i=0; i<this.jssp.machines.length; i++){
      if(this.jssp.machines[i].type== activity.machine_type){
        machine = i
        break;
      }
    }
    return {activity: act, machine: machine, position:1}
  }

  do_step(activity, machine, position){
    if (machine == -1){
      activity.remove_from_machines()
    } else {
      this.jssp.machines[machine].addActivity(activity, position)
    }
  }

  start(jssp){
    this.jssp = jssp
    var saved_steps = <%=@steps%>
    var j
    for(j=0; j<saved_steps.length; j++){
      console.log(saved_steps[j][0],saved_steps[j][1],saved_steps[j][2])
      this.do_step(activities_map[saved_steps[j][0]],saved_steps[j][1],saved_steps[j][2])
      step+=1
    }

    /*
    //just get steps from user
    while(true){
      var next_step = this.getNextStep()
      if(next_step == -1){
        break;
      }
      this.do_step(next_step.activity, next_step.machine, next_step.position)
      console.log(next_step)

    }
    */
  }
}

function move_not_possible(msg){
  console.log(msg)
}
var JSSP = []
var idGame = <%=@idGame%>
var machines = []
var jobs =[]
var step = 0
var slvr = new solver()
var source

startJSSP()
program = new JSSProblem(0, source, slvr)

function startJSSP(){
  //function that will reciebe current JSSP from db and will start the problem
  //JSSP = <%=@JSSA%>
  //<%for i in 1..@n_machines%>
  //machines.push([])
  //<%end%>
  //source.machines (Number of machines that this problem has)
  //source.machine_type (string with the type of each string)
  //source.activities (activities from each job)
  //source.activities[x] (activities from job x where you have [activity cost, machine type])

  //n_machines (Number of machines that this problem has)
  //machine_type (string with the type of each string, assume that maximum type id = 9)
  //JSSA (each activity, includes [#job, position, time_cost,id activity, machine_type])

  source = {machines: <%= @n_machines%>, machine_type: machine_type, activities: assignJobs(<%= @JSSA%>)}

  console.log(source)

}
function assignJobs(activities_info){
  // will add activities to its respective job in order
  // convert [#job, position, time_cost,id activity, machine_type] to
  //source.activities (activities from each job)
  //source.activities[x] (activities from job x where you have [activity cost, machine type, activity id])

  var i
  var number_jobs = 0
  for (i = 0; i < activities_info.length; i++){
    if (activities_info[i][0]>number_jobs){
      number_jobs = activities_info[i][0]
    }
  }
  number_jobs++;

  var jobs = []
  for (i = 0; i < number_jobs; i++){
    jobs.push([])
  }
  for (i = 0; i < activities_info.length; i++){
    var temp = activities_info[i]
    jobs[temp[0]][temp[1]] =[temp[2], temp[4], temp[3]]

  }
  //display jobs by using function addJob(jobId, list of activities)
  var j
  for (j = 0; j <jobs.length; j++){
    addJob(j, jobs[j])
  }

  return jobs
}

function transform_movement(machine, activity, next_activity){

  activity = parseInt(activity.substr(8))
  var position = 0
  if (machine!= -1){
    machine = parseInt(machine.substr(7))

    if(next_activity != -1){
      next_activity = parseInt(next_activity.substr(8))
      position = activities_map[next_activity].position+1
    }
  }
  console.log(position)
  move(activity,machine, position)
}

function move(activity, machine, position){
  //compute movement

  slvr.do_step(activities_map[activity], machine, position)

  sendDataMovement(activity, machine, position)
  step +=1
}

function checkMovement(activity, machine, position){

}

function printData(){

}




function sendDataMovement(idActivity, machine, position){
  //send data of step to database
  //step includes:
  //    general: idGame, number_step
  //    from movement: idActivity, number_machine, position
  console.log("Data that should be sent:", idActivity, machine, position)

  $.ajax({
    url: "/save_step",
    data: {"idGame": idGame, "number_step": step, "idActivity": idActivity, "number_machine": machine
              , "position": position, "authenticity_token": window._token},
    type: "POST",
    success: function(data){
      console.log(data.message, data)
    },
    error: function (jqXHR, exception) {
        var msg = '';
        if (jqXHR.status === 0) {
            msg = 'Not connect.\n Verify Network.';
        } else if (jqXHR.status == 404) {
            msg = 'Requested page not found. [404]';
        } else if (jqXHR.status == 500) {
            msg = 'Internal Server Error [500].';
        } else if (exception === 'parsererror') {
            msg = 'Requested JSON parse failed.';
        } else if (exception === 'timeout') {
            msg = 'Time out error.';
        } else if (exception === 'abort') {
            msg = 'Ajax request aborted.';
        } else {
            msg = 'Uncaught Error.\n' + jqXHR.responseText;
        }
        $('#post').html(msg);
        console.log(msg)
    }
  })
}

</script>


<%= link_to 'logout', 'logout' %>
