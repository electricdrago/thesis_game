<!-- conseguir un game especifico y los alienigenas especificos de ese game, o del estado del jugador -->
<style>
/*
  .selected {
    border: 9px solid green !important;
  }
  */
  .over {
    border: 7px solid yellow !important;
  }
  .wrong {
    border: 7px solid red !important;
  }
  button {
    background-color: lightseagreen;
    color: white;
    padding: 3% 5%;
    margin: .5vw;
    border: none;
    cursor: pointer;
    font-size: 3.5vw
  }
  a {
    background-color: lightblue;
    color: red;
    margin: .4vw 0;
    width: 20%;
    font-size: 2.3vw;
    text-align: center;
    align-items: center;
    position: fixed;
    top: 1%;
    right:3%;
  }

  body {
   background-image: url('assets/space.jpg');
   background-repeat: no-repeat;
   background-attachment: fixed;
   background-size: cover;
  }

  body, html{
    top:0;
    left:0;
  }

  .points {
    background: white;
    opacity: .5;
    width: 18vw;
    height: 7vw;
    font-size: 3vw;
    text-align: center;
    align-items: center;
    position: fixed;
    top: 5vw;
    right:3%;
    pointer-events: none;

  }
  .dragged {
    position: fixed !important;
  }
</style>
<svg id ="svg" style="position:absolute; top:0; left:0; z-index:-1">
  <line x1="0" y1="0" x2="0" y2="0" stroke = "red" id = "line"/>
</svg>

<div id="jobs" style="width:80%"></div>
<div id="machines"></div>

<button type="button" onclick="endGame()">Next Game</button> <br> <br>
<div id="percentage" class = "points">0% completed</div>
<%= link_to 'logout', 'logout' %>

<script>
function getDocHeight(){
  return Math.max(document.body.scrollHeight, document.documentElement.scrollHeight,
  document.body.offsetHeight, document.documentElement.offsetHeight,
  document.body.clientHeight, document.documentElement.clientHeight)
}
function getDocWidth(){
  return Math.max(document.body.scrollWidth, document.documentElement.scrollWidth,
  document.body.offsetWidth, document.documentElement.offsetWidth,
  document.body.clientWidth, document.documentElement.clientWidth)
}

function resizeSvg(){
  svg = document.getElementById("svg")
  svg.style.height = getDocHeight() + "px"
  svg.style.width = getDocWidth() + "px"
}
window.onload = resizeSvg
window.onresize= resizeSvg;
function lineFollowMouse(ev){
  var line = document.getElementById("line")
  line.x2.baseVal.value = ev.pageX
  line.y2.baseVal.value = ev.pageY
  console.log(line, ev.pageX, ev.pageY)
}

<%= render "jssp.js"%>

var maxTime = <%=@maxTime%>
var activities_map = []
function moveValues(array, seed){
  movement = seed%array.length
  newarr = array.slice(movement,array.length).concat(array.slice(0,movement))
  return newarr
}
//los ultimos colores estan feos
var job_colors = moveValues(["magenta", "GreenYellow", "aqua", "palegreen", "rebeccapurple"], <%=@JSSP.id%>)
var machine_colors = moveValues([ "blue", "green", "red", "Indigo", "Orange", "orangeRed"], <%=@JSSP.id%>)
var machine_type = ""
var aliens =["assets/nicubunu_Game_baddie_Alien.png", "assets/nicubunu_Game_baddie_Billy.png", "assets/nicubunu_Game_baddie_Bricky.png"]
<% @machine_type.each_char { |c|%>
  machine_type+=<%=c%>
<%}%>
function drag(ev){
  ev.dataTransfer.setData("text", ev.target.id)
  ev.target.classList.add("selected")
  console.log(ev)
  var base = getPrevAct(ev.target.id)
  if (base>=0){
    var prevAct = document.getElementById("activity"+String(base))
    prevAct.classList.add("prev")
    var line = document.getElementById("line")
    line.y1.baseVal.value = prevAct.offsetTop
    line.x1.baseVal.value = prevAct.offsetLeft
    console.log(prevAct, line)
    //svg = document.getElementById("svg")
    //svg.addEventListener("dragover", lineFollowMouse, true)

    //document.addEventListener("mousemove", lineFollowMouse, true)
    //ev.target.setAttribute("ondrag", "lineFollowMouse(event)")
    ev.target.addEventListener("drag", function(){
      //console.log(this)
      var line = document.getElementById("line")
      line.x2.baseVal.value = this.offsetLeft
      line.y2.baseVal.value = this.offsetTop
      console.log(line, this.offsetLeft, this.offsetTop, this)
    })
  }

}
function allowDrop(ev){
  ev.preventDefault()
  ev.target.classList.add("over")
}

function drop(ev){
  ev.preventDefault()
  var data = ev.dataTransfer.getData("text")

  var act = document.getElementById(data)
  var hidden_space = document.getElementById("hidden"+data)
  if (!hidden_space){
    hidden_space = document.createElement("div")
    hidden_space.setAttribute("id","hidden"+data)
    hidden_space.setAttribute("class","hidden_space")
    hidden_space.setAttribute("style", "height: 100%; width: 1%;float:left;")
  }
  ev.target.classList.remove("selected", "wrong", "over")
  if (ev.target.classList.contains("machine")){

    //ev.target.appendChild(act)
    //ev.target.insertBefore(hidden_space,act)
    transform_movement(ev.target.id, data, -1)
  } else if (ev.target.classList.contains("hidden_space")){
    //ev.target.parentNode.insertBefore(act, ev.target)
    //ev.target.parentNode.insertBefore(hidden_space,act)
    transform_movement(ev.target.parentNode.id, data, ev.target.id.substr(6))
  } else if (ev.target.classList.contains("activity")){
    hidden_back = document.getElementById("hidden"+ev.target.id)
    if(hidden_back){
      //ev.target.parentNode.insertBefore(act, hidden_back)
      //ev.target.parentNode.insertBefore(hidden_space,act)
      transform_movement(ev.target.parentNode.id, data, ev.target.id)
    }
  } else {
    ev.preventDefault()
  }

}

function deClass(ev){
  ev.target.classList.remove("selected", "wrong", "over")
}

function defaultDrop(ev){
  console.log(ev)
  var line = document.getElementById("line")
  line.x1.baseVal.value = 0
  line.y1.baseVal.value = 0
  line.x2.baseVal.value = 0
  line.y2.baseVal.value = 0
  svg = document.getElementById("svg")
  svg.removeEventListener("dragover", lineFollowMouse, true)
  ev.target.classList.remove("selected", "wrong", "over")
  if ("none" == ev.dataTransfer.dropEffect){
    var position = document.getElementById("original"+ev.target.id)
    if(position){
      //position.parentNode.insertBefore(ev.target, position)
      var hidden_space = document.getElementById("hidden"+ev.target.id)
      if(hidden_space){
        //hidden_space.parentNode.removeChild(hidden_space)
      }
      transform_movement(-1, ev.target.id, -1)
    }
  }
}

function addJob(id,activities){
  //Job will have the size of each activity and its id
  // activities[x] = [activity cost, machine type, activity id]

  var job = document.createElement("div")
  job.setAttribute("id","job"+String(id))
  job.setAttribute("style", "height: 70px;")


  var j
  for (j=0; j<activities.length; j++){
    var activity = document.createElement("div")
    activity.setAttribute("id", "activity"+String(activities[j][2]))
    activity.setAttribute("draggable", "true")
    activity.setAttribute("class","activity")
    activity.setAttribute("ondragstart", "drag(event)")
    activity.setAttribute("ondragend", "defaultDrop(event)")
    //activity.setAttribute("ondrag", "lineFollowMouse(event)")
    activity.setAttribute("ontouchstart", function (){

        var event = document.createEvent('Event');
        event.initEvent('ondragstart', true, true);
        this.dispatchEvent(event)
    })
    activity.addEventListener("touchmove", function(ev){
      console.log("hjg")
      var tLoc = ev.targetTouches[0];
      this.classList.add("dragged")
      this.style.left = tLoc.pageX + 'px'
      this.style.top = tLoc.pageY + 'px'
      console.log(document.elementFromPoint(tLoc.pageX, tLoc.pageY))
    })
    activity.setAttribute("style", "box-sizing: border-box; width: "+String(activities[j][0]/maxTime*100)+"%; "+
        "height: 100%; float:left; background: "+ job_colors[id]+"; border: solid; border-width: 7px .7vw; border-color: "+machine_colors[activities[j][1]]+" "+job_colors[id]+";")
    var original_position = document.createElement("div")
    var img = document.createElement("img")
    img.setAttribute("src",aliens[activities[j][1]])
    img.setAttribute("style", "height:100%; max-width:100%; pointer-events: none;")
    //img.setAttribute("ondragstart", "function(event){event.preventBubble(); event.stopPropagation()}")
    activity.appendChild(img)
    original_position.setAttribute("id", "original"+activity.id)
    original_position.setAttribute("style", "width:0 ;float:left;")
    job.appendChild(activity)
    job.appendChild(original_position)

  }
  var jobs = document.getElementById("jobs")
  jobs.appendChild(job)
  small_space = document.createElement("div")
  small_space.setAttribute("style", "height: 10px")
  jobs.appendChild(small_space)


}

function createMachines(amount){
  var j
  for (j = 0; j < amount; j++){
    var tempDiv = document.createElement("div")
    tempDiv.setAttribute("style", "width:100%; height: 90px; ")
    var img = document.createElement("img")
    img.setAttribute("src",aliens[(parseInt(machine_type.charAt(j))||0)])
    img.setAttribute("style", "max-height:70px; max-width:14%;float:left")
    var machine = document.createElement("div")
    machine.setAttribute("id", "machine"+String(j))
    machine.setAttribute("class", "machine")
    machine.setAttribute("style", "height: 70px; width:80%; float:left; border: 7px solid "+machine_colors[(parseInt(machine_type.charAt(j))||0)]+";")
    machine.setAttribute("ondrop", "drop(event)")
    machine.setAttribute("ondragover", "allowDrop(event)")
    machine.setAttribute("ondragleave", "deClass(event)")
    var machines = document.getElementById("machines")
    tempDiv.appendChild(img)
    tempDiv.appendChild(machine)
    machines.appendChild(tempDiv)
    small_space = document.createElement("div")

    small_space.setAttribute("style", "height: 10px")
    machines.appendChild(small_space)
  }
}

function move_activity(machine, position, activity, time_wasted, next_activity){
  //console.log("move", machine, position, activity, time_wasted, next_activity)
  activity = String(activity)
  if (machine == -1){
    //get activity to original position
    var original_position = document.getElementById("originalactivity"+activity)
    var act = document.getElementById("activity"+activity)
    if(original_position){
      original_position.parentNode.insertBefore(act, original_position)
      hidden_space = document.getElementById("hiddenactivity"+activity)
      if(hidden_space){
        hidden_space.parentNode.removeChild(hidden_space)
      }
    }
  }else {
    var act = document.getElementById("activity"+activity)
    act.setAttribute("draggable", "false")
    var hidden_space = document.getElementById("hiddenactivity"+activity)
    var mach = document.getElementById("machine"+String(machine))
    if (!hidden_space){
      hidden_space = document.createElement("div")
      hidden_space.setAttribute("id","hiddenactivity"+activity)
      hidden_space.setAttribute("class","hidden_space")
      hidden_space.setAttribute("style", "height: 100%; width: 1%;float:left;")
    }
    hidden_space.style.width = String(time_wasted/maxTime*100)+"%"
    if(position <0 || next_activity<0){
      //add to end of machine (just append)
      mach.appendChild(act)
      mach.insertBefore(hidden_space,act)
    } else {
      act_2_hidden = document.getElementById("hiddenactivity"+String(next_activity))
      //console.log("moving", activity, "before", next_activity, act_2_hidden)
      mach.insertBefore(act, act_2_hidden)
      mach.insertBefore(hidden_space,act)
    }
  }

  $('#percentage').html(String(Math.floor(slvr.get_done()*100))+'% completed')

}



var idGame = <%=@idGame%>
var step = 0
var slvr = new solver()
var source = {machines: <%= @n_machines%>, machine_type: machine_type, activities: assignJobs(<%= @JSSA%>)}
createMachines(<%= @n_machines%>)
var saved_steps = <%=@steps%>
program = new JSSProblem(idGame, source, slvr, saved_steps)

function assignJobs(activities_info){
  // will add activities to its respective job in order
  // convert [#job, position, time_cost,id activity, machine_type] to
  //source.activities (activities from each job)
  //source.activities[x] (activities from job x where you have [activity cost, machine type, activity id])

  var i
  var number_jobs = 0
  for (i = 0; i < activities_info.length; i++){
    if (activities_info[i][0]>number_jobs){
      number_jobs = activities_info[i][0]
    }
  }
  number_jobs++;

  var jobs = []
  for (i = 0; i < number_jobs; i++){
    jobs.push([])
  }
  for (i = 0; i < activities_info.length; i++){
    var temp = activities_info[i]
    jobs[temp[0]][temp[1]] =[temp[2], temp[4], temp[3]]

  }
  //display jobs by using function addJob(jobId, list of activities)
  var j
  for (j = 0; j <jobs.length; j++){
    addJob(j, jobs[j])
  }

  return jobs
}

function transform_movement(machine, activity, next_activity){

  activity = parseInt(activity.substr(8))
  var position = 0
  if (machine!= -1){
    machine = parseInt(machine.substr(7))

    if(next_activity != -1){
      next_activity = parseInt(next_activity.substr(8))
      position = activities_map[next_activity].position+1
    }
  }
  move(activity,machine, position)
}

function move(activity, machine, position){
  //compute movement

  slvr.do_step(activities_map[activity], machine, position)

  sendDataMovement(activity, machine, position)
  step +=1
}

function getPrevAct(activity){
  activity = parseInt(activity.substr(8))
  return activities_map[activity].getPrev()
}

function checkMovement(activity, machine, position){

}

function print_per(){
  console.log(slvr.get_done())
}

function endGame(){
  //Hacer un boton de tipo post o "hacerlo", pero todo al activar esta funcion
  var points = slvr.get_done()
  var data = {"points": points, "idGame":idGame}
  create_post(data,"/end_game")
}

function create_post(data, path){
  data.authenticity_token= window._token
  console.log("creating form")
  form = document.createElement("form")
  form.method = 'post'
  form.action = path
  for (key in data){
    element = document.createElement("input")
    element.type = 'hidden'
    element.name = key
    element.value = data[key]
    form.appendChild(element)
  }
  document.body.appendChild(form)
  form.submit()
  //console.log("khj")
}
function sendDataMovement(idActivity, machine, position){
  //send data of step to database
  //step includes:
  //    general: idGame, number_step
  //    from movement: idActivity, number_machine, position
  console.log("Data that should be sent:", idActivity, machine, position)

  $.ajax({
    url: "/save_step",
    data: {"idGame": idGame, "number_step": step, "idActivity": idActivity, "number_machine": machine
              , "position": position, "authenticity_token": window._token},
    type: "POST",
    success: function(data){
      console.log(data.message, data)
    },
    error: function (jqXHR, exception) {
        var msg = '';
        if (jqXHR.status === 0) {
            msg = 'Not connect.\n Verify Network.';
        } else if (jqXHR.status == 404) {
            msg = 'Requested page not found. [404]';
        } else if (jqXHR.status == 500) {
            msg = 'Internal Server Error [500].';
        } else if (exception === 'parsererror') {
            msg = 'Requested JSON parse failed.';
        } else if (exception === 'timeout') {
            msg = 'Time out error.';
        } else if (exception === 'abort') {
            msg = 'Ajax request aborted.';
        } else {
            msg = 'Uncaught Error.\n' + jqXHR.responseText;
        }
        $('#post').html(msg);
        console.log(msg)
    }
  })
}

</script>
